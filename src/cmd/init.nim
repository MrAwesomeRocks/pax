import asyncdispatch, options, os, osproc
import ../api/metadata
import ../cli/prompt, ../cli/term
import ../util/flow
import ../modpack/manifest, ../modpack/loader, ../modpack/version

proc paxInitManifest(): void =
  ## initialize the modpack files (modpack folder structure & `manifest.json`)
  echoRoot "MANIFEST".dim
  var manifest = Manifest()
  manifest.name = prompt(indentPrefix & "Modpack name")
  manifest.author = prompt(indentPrefix & "Modpack author")
  manifest.version = prompt(indentPrefix & "Modpack version", default = "1.0.0")
  manifest.mcVersion = Version(prompt(indentPrefix & "Minecraft version", default = "1.16.5"))

  let loader = prompt(indentPrefix & "Loader", choices = @["forge", "fabric"], default = "forge").toLoader
  let loaderId = waitFor(manifest.mcVersion.getMcModloaderId(loader))
  if loaderId.isNone:
    echoError "This is either not a minecraft version, or no ", $loader, " version exists for this minecraft version."
    quit(1)
  manifest.mcModloaderId = loaderId.get()
  echoDebug "Installed ", $loader, " version ", manifest.mcModloaderId.greenFg

  echoInfo "Creating manifest.."
  removeDir(packFolder)
  createDir(packFolder)
  createDir(overridesFolder)
  writeFile(paxFile, "Modpack generated by PAX")
  manifest.writeToDisk()

template exec(cmd: string): int = execCmdEx(cmd, options = {poUsePath, poStdErrToStdOut, poEvalCommand, poDaemon}).exitCode

proc paxInitGit*(): void =
  ## initialize a git repository (+ gitignore and ci files)
  const successValue = 0
  const noGitRepositoryValue = 128

  try:
    if exec("git --version") == successValue:
      if exec("git status") == noGitRepositoryValue:
        echoDebug "Initializing .git repository.."
        discard exec("git init")
        discard exec("git branch -m main")

    echoDebug "Writing .gitignore.."
    writeFile(gitIgnoreFile, gitIgnoreContent)

    echoDebug "Writing Github CI file.."
    createDir(githubCiFolder)
    writeFile(githubCiFile, githubCiContent)
  except OSError:
    discard

proc paxInit*(force: bool, skipManifest: bool, skipGit: bool): void =
  ## initialize a new modpack in the current directory
  if not force:
    rejectPaxProject()
    returnIfNot promptYN("Are you sure you want to the pax project in the current folder?", default = true)

  if not skipManifest:
    paxInitManifest()

  if not skipGit:
    paxInitGit()